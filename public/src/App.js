import React, { Component } from 'react';
import { connect } from 'react-redux';
import {wrapper, container} from './helpers/styleGuide';
import { meFromId, meFromIdFailure, meFromIdSuccess, resetToken } from './user/actions' 
import Header from './shared/Header';
class App extends Component {
  componentDidMount() {
    this.props.loadUserFromToken();
  }
  render() {
    return (
     <div style={wrapper}>
     <Header type="posts_index" />
        <div
          style={{
            ...container,
          }}
        >
        {this.props.children} 
      </div>
    </div>
    );
  }
}


const mapDispatchToProps = (dispatch) => {
  return {
     resetMe: () =>{
     	localStorage.removeItem('token'); //remove token from storage
     	dispatch(resetToken());
     },
     loadUserFromToken: () => {
  	 	let id = localStorage.getItem('id');
      let token = localStorage.getItem('token')
  	 	if(!id || id === '') {//if there is no token, dont bother
  	 		return;
  	 	}

  	 //fetch user from token (if server deems it's valid token)
      return dispatch(meFromId(id, token))
        .then((response) => {
          if (!response.error) {
          	//reset token (possibly new token that was regenerated by the server)
            console.log('user response ==>', response);
          	localStorage.setItem('token', response.payload.data.token);
            return dispatch(meFromIdSuccess(response.payload.data.user))
          } else {
          	localStorage.removeItem('token');//remove token from storage
            return dispatch(meFromIdFailure(response.payload));
          }
        });
    }
  }
}

App = connect(null, mapDispatchToProps)(App);

export default App;
